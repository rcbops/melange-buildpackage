#!/usr/bin/env python
# vim: tabstop=4 shiftwidth=4 softtabstop=4

# Copyright 2011 OpenStack LLC.
# All Rights Reserved.
#
#    Licensed under the Apache License, Version 2.0 (the "License"); you may
#    not use this file except in compliance with the License. You may obtain
#    a copy of the License at
#
#         http://www.apache.org/licenses/LICENSE-2.0
#
#    Unless required by applicable law or agreed to in writing, software
#    distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
#    WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
#    License for the specific language governing permissions and limitations
#    under the License.

"""Script to delete deallocated ips.

Any deallocated ip remains in a 'soft' deallocated state.
This script cleans up all these 'soft' deallocated ips that are
older than a configured timeframe.

This script can be run as a cron job on the melange server.

"""

import logging
import optparse
import os
import sys

# If ../melange/__init__.py exists, add ../ to Python search path, so that
# it will override what happens to be installed in /usr/(local/)lib/python...
possible_topdir = os.path.normpath(os.path.join(os.path.abspath(sys.argv[0]),
                                   os.pardir,
                                   os.pardir))
if os.path.exists(os.path.join(possible_topdir, 'melange', '__init__.py')):
    sys.path.insert(0, possible_topdir)

from melange.db import db_api
from melange.common import config
from melange.ipam import models


def _configure_db_session(conf):
    db_api.configure_db(conf)


def _load_app_environment():
    oparser = optparse.OptionParser()
    config.add_common_options(oparser)
    config.add_log_options(oparser)
    (options, args) = config.parse_options(oparser)
    conf = config.Config.load_paste_config('melange', options, args)
    config.setup_logging(options=options, conf=conf)
    _configure_db_session(conf)


if __name__ == '__main__':
    try:
        _load_app_environment()
        models.IpBlock.delete_all_deallocated_ips()
    except RuntimeError as error:
        sys.exit("ERROR: %s" % error)
